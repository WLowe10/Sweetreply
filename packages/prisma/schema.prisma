generator client {
    provider = "prisma-client-js"
}

generator zod {
    provider              = "zod-prisma"
    output                = "./zod"
    modelCase             = "camelCase"
    modelSuffix           = "Model"
    relationModel         = false
    prismaJsonNullability = true
}

generator dbml {
    provider = "prisma-dbml-generator"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Auth

model User {
    id                             String    @id @default(uuid())
    role                           String    @default("user")
    email                          String    @unique
    first_name                     String
    last_name                      String
    password_hash                  String
    avatar_url                     String?
    created_at                     DateTime  @default(now())
    updated_at                     DateTime? @updatedAt
    verified_at                    DateTime?
    verification_requested_at      DateTime?
    password_reset_requested_at    DateTime?
    password_reset_code            String?   @unique
    password_reset_code_expires_at DateTime?
    stripe_customer_id             String

    sessions Session[]
    projects Project[]

    @@map(name: "auth_user")
}

model Session {
    id         String   @id @default(uuid())
    user_id    String
    expires_at DateTime
    user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

    @@map(name: "session")
}

// Social Accounts (These are the bots that will be used to reply to the leads)

model Bot {
    id       String  @id @default(uuid())
    platform String
    username String
    password String
    status   String
    active   Boolean @default(true)

    // it may make sense to serialize and store sessions this way
    // session Json? @db.JsonB

    created_at   DateTime  @default(now())
    last_used_at DateTime?

    errors BotError[]
    leads  Lead[]

    @@map(name: "bot")
}

model BotError {
    id      String   @id @default(uuid())
    bot_id  String
    message String
    date    DateTime

    bot Bot @relation(fields: [bot_id], references: [id], onDelete: Cascade)

    @@map("bot_error")
}

// Team
// will be implemented later

// model Team {
//     id String @id @default(uuid())

//     name               String
//     image_url          String?
//     seat_limit         Int?
//     stripe_customer_id String

//     created_at DateTime  @default(now())
//     updated_at DateTime? @updatedAt

//     owner_id String
//     owner    User   @relation(fields: [owner_id], references: [id], onDelete: Cascade)

//     team_members TeamMember[]
//     // projects     Project[]
//     leads        Lead[]

//     @@map(name: "team")
// }

// enum TeamMemberRole {
//     owner
//     admin
//     member
// }

// model TeamMember {
//     role TeamMemberRole @default(member)

//     team_id   String
//     team      Team      @relation(fields: [team_id], references: [id], onDelete: Cascade)
//     user_id   String
//     user      User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
//     joined_at DateTime?

//     @@id([team_id, user_id])
//     @@map(name: "team_member")
// }

// Project

model Project {
    id          String  @id @default(uuid())
    user_id     String
    name        String
    description String?
    website_url String?
    query       String?

    replies_enabled           Boolean @default(true)
    custom_reply_instructions String?

    webhook_url String?
    created_at  DateTime  @default(now())
    updated_at  DateTime? @updatedAt

    user  User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
    leads Lead[]

    @@map(name: "project")
}

// Lead

model Lead {
    id                String    @id @default(uuid())
    type              String    @default("post")
    platform          String
    remote_id         String
    remote_user_id    String
    channel           String? // Ex: subreddit name for reddit
    remote_channel_id String?
    username          String
    name              String?
    title             String?
    content           String
    remote_url        String?
    date              DateTime
    created_at        DateTime  @default(now())
    project_id        String
    reply             String?
    replied_at        DateTime?
    reply_bot_id      String?

    project   Project @relation(fields: [project_id], references: [id], onDelete: Cascade)
    reply_bot Bot?    @relation(fields: [reply_bot_id], references: [id])

    @@map(name: "lead")
}
