generator client {
    provider = "prisma-client-js"
}

generator zod {
    provider              = "zod-prisma"
    output                = "./zod"
    relationModel         = true
    modelCase             = "camelCase"
    modelSuffix           = "Model"
    prismaJsonNullability = true
}

generator dbml {
    provider = "prisma-dbml-generator"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum UserRole {
    admin
    user
}

// consider prisma default date time

model User {
    id                             String    @id @default(uuid())
    role                           UserRole  @default(user)
    email                          String    @unique
    first_name                     String
    last_name                      String
    password_hash                  String
    avatar_url                     String?
    created_at                     DateTime  @default(now())
    updated_at                     DateTime? @updatedAt
    verified_at                    DateTime?
    verification_requested_at      DateTime?
    password_reset_requested_at    DateTime?
    password_reset_code            String?   @unique
    password_reset_code_expires_at DateTime?
    stripe_customer_id             String

    team_members TeamMember[]
    teams        Team[]
    sessions     Session[]

    @@map(name: "auth_user")
}

model Session {
    id         String   @id @default(uuid())
    user_id    String
    expires_at DateTime
    user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

    @@map(name: "session")
}

model Team {
    id String @id @default(uuid())

    name               String
    image_url          String?
    seat_limit         Int?
    stripe_customer_id String

    created_at DateTime  @default(now())
    updated_at DateTime? @updatedAt

    owner_id String
    owner    User   @relation(fields: [owner_id], references: [id], onDelete: Cascade)

    team_members TeamMember[]

    @@map(name: "team")
}

enum TeamMemberRole {
    owner
    admin
    member
}

model TeamMember {
    role TeamMemberRole @default(member)

    team_id   String
    team      Team      @relation(fields: [team_id], references: [id], onDelete: Cascade)
    user_id   String
    user      User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
    joined_at DateTime?

    @@id([team_id, user_id])
    @@map(name: "team_member")
}
